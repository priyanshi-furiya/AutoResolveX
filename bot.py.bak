from botbuilder.core import ActivityHandler, TurnContext
from botbuilder.schema import Activity, ConversationReference
from openai import AzureOpenAI
import os
import json
import traceback


class TeamsBot(ActivityHandler):
    def __init__(self, app_id: str, aoai_client=None):
        self.app_id = app_id
        self._conversation_references = {}
        self.aoai_client = aoai_client

        # âœ… Always set this
        self.gpt_deployment = os.getenv('AZURE_OPENAI_GPT4O_DEPLOYMENT')

        # Initialize Azure OpenAI client if not provided
        if not self.aoai_client:
            try:
                self.aoai_client = AzureOpenAI(
                    api_key=os.getenv('AZURE_OPENAI_API_KEY'),
                    api_version=os.getenv('AZURE_OPENAI_API_VERSION'),
                    azure_endpoint=os.getenv('AZURE_OPENAI_ENDPOINT')
                )
                print("Azure OpenAI client initialized successfully in bot")
            except Exception as e:
                print(f"Error initializing Azure OpenAI client: {e}")
                self.aoai_client = None

    async def on_message_activity(self, turn_context: TurnContext):
        self._add_conversation_reference(turn_context.activity)
        text = turn_context.activity.text.lower() if turn_context.activity.text else ""

        try:
            if text.startswith('/'):
                # Handle commands
                await self._handle_command(turn_context, text)
            else:
                # Process with Azure OpenAI
                await self._process_with_openai(turn_context, text)
        except Exception as e:
            print(f"Error processing message: {e}")
            traceback.print_exc()
            await turn_context.send_activity("I encountered an error processing your request. Please try again.")

    async def _handle_command(self, turn_context: TurnContext, text: str):
        """Handle bot commands."""
        base_url = "https://autoresolvex-heafakckc3aqb5d6.westus3-01.azurewebsites.net"

        if text.startswith('/similar'):
            card = {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.2",
                    "body": [
                        {
                            "type": "TextBlock",
                            "text": "Similar Tickets",
                            "weight": "bolder",
                            "size": "medium"
                        },
                        {
                            "type": "TextBlock",
                            "text": "View tickets similar to your current issue",
                            "wrap": True
                        }
                    ],
                    "actions": [
                        {
                            "type": "Action.OpenUrl",
                            "title": "View Similar Tickets",
                            "url": f"{base_url}/similar-tickets"
                        }
                    ]
                }
            }
            await turn_context.send_activity({"attachments": [card]})
        elif text.startswith('/recommend'):
            card = {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.2",
                    "body": [
                        {
                            "type": "TextBlock",
                            "text": "Recommended Tickets",
                            "weight": "bolder",
                            "size": "medium"
                        },
                        {
                            "type": "TextBlock",
                            "text": "View recommended tickets based on priority and severity",
                            "wrap": True
                        }
                    ],
                    "actions": [
                        {
                            "type": "Action.OpenUrl",
                            "title": "View Recommended Tickets",
                            "url": f"{base_url}/recommended-tickets"
                        }
                    ]
                }
            }
            await turn_context.send_activity({"attachments": [card]})
        elif text.startswith('/help'):
            help_text = """
Available commands:
- /similar - View similar tickets
- /recommend - View recommended tickets
- /help - Show this help message
            """
            await turn_context.send_activity(help_text)

    async def _process_with_openai(self, turn_context: TurnContext, text: str):
        """Process message with Azure OpenAI."""
        if not self.aoai_client or not text.strip():
            await turn_context.send_activity("I'm unable to process your message at the moment.")
            return

        try:
            print(f"Processing message: {text}")
            messages = [
                {"role": "system", "content": "You are an AI assistant that helps with IT support tickets."},
                {"role": "user", "content": text}
            ]

            response = self.aoai_client.chat.completions.create(
                model=self.gpt_deployment,
                messages=messages,
                temperature=0.7,
                max_tokens=800
            )

            reply = response.choices[0].message.content
            print(f"Generated response: {reply}")
            await turn_context.send_activity(reply)

        except Exception as e:
            print(f"Error in OpenAI processing: {e}")
            traceback.print_exc()
            await turn_context.send_activity("I encountered an error processing your request. Please try again.")

    def _add_conversation_reference(self, activity: Activity):
        """Store a conversation reference."""
        conversation_reference = TurnContext.get_conversation_reference(
            activity)
        self._conversation_references[conversation_reference.user.id] = conversation_reference
